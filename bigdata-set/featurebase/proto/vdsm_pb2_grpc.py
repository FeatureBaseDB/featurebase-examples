# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import vdsm_pb2 as vdsm__pb2


class MoleculaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVDSs = channel.unary_unary(
            "/vdsm.Molecula/GetVDSs",
            request_serializer=vdsm__pb2.GetVDSsRequest.SerializeToString,
            response_deserializer=vdsm__pb2.GetVDSsResponse.FromString,
        )
        self.GetVDS = channel.unary_unary(
            "/vdsm.Molecula/GetVDS",
            request_serializer=vdsm__pb2.GetVDSRequest.SerializeToString,
            response_deserializer=vdsm__pb2.GetVDSResponse.FromString,
        )
        self.PostVDS = channel.unary_unary(
            "/vdsm.Molecula/PostVDS",
            request_serializer=vdsm__pb2.PostVDSRequest.SerializeToString,
            response_deserializer=vdsm__pb2.PostVDSResponse.FromString,
        )
        self.DeleteVDS = channel.unary_unary(
            "/vdsm.Molecula/DeleteVDS",
            request_serializer=vdsm__pb2.DeleteVDSRequest.SerializeToString,
            response_deserializer=vdsm__pb2.DeleteVDSResponse.FromString,
        )
        self.QuerySQL = channel.unary_stream(
            "/vdsm.Molecula/QuerySQL",
            request_serializer=vdsm__pb2.QuerySQLRequest.SerializeToString,
            response_deserializer=vdsm__pb2.RowResponse.FromString,
        )
        self.QuerySQLUnary = channel.unary_unary(
            "/vdsm.Molecula/QuerySQLUnary",
            request_serializer=vdsm__pb2.QuerySQLRequest.SerializeToString,
            response_deserializer=vdsm__pb2.TableResponse.FromString,
        )
        self.QueryPQL = channel.unary_stream(
            "/vdsm.Molecula/QueryPQL",
            request_serializer=vdsm__pb2.QueryPQLRequest.SerializeToString,
            response_deserializer=vdsm__pb2.RowResponse.FromString,
        )
        self.QueryPQLUnary = channel.unary_unary(
            "/vdsm.Molecula/QueryPQLUnary",
            request_serializer=vdsm__pb2.QueryPQLRequest.SerializeToString,
            response_deserializer=vdsm__pb2.TableResponse.FromString,
        )
        self.Inspect = channel.unary_stream(
            "/vdsm.Molecula/Inspect",
            request_serializer=vdsm__pb2.InspectRequest.SerializeToString,
            response_deserializer=vdsm__pb2.RowResponse.FromString,
        )


class MoleculaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetVDSs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetVDS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PostVDS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteVDS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QuerySQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QuerySQLUnary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QueryPQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QueryPQLUnary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Inspect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MoleculaServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetVDSs": grpc.unary_unary_rpc_method_handler(
            servicer.GetVDSs,
            request_deserializer=vdsm__pb2.GetVDSsRequest.FromString,
            response_serializer=vdsm__pb2.GetVDSsResponse.SerializeToString,
        ),
        "GetVDS": grpc.unary_unary_rpc_method_handler(
            servicer.GetVDS,
            request_deserializer=vdsm__pb2.GetVDSRequest.FromString,
            response_serializer=vdsm__pb2.GetVDSResponse.SerializeToString,
        ),
        "PostVDS": grpc.unary_unary_rpc_method_handler(
            servicer.PostVDS,
            request_deserializer=vdsm__pb2.PostVDSRequest.FromString,
            response_serializer=vdsm__pb2.PostVDSResponse.SerializeToString,
        ),
        "DeleteVDS": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteVDS,
            request_deserializer=vdsm__pb2.DeleteVDSRequest.FromString,
            response_serializer=vdsm__pb2.DeleteVDSResponse.SerializeToString,
        ),
        "QuerySQL": grpc.unary_stream_rpc_method_handler(
            servicer.QuerySQL,
            request_deserializer=vdsm__pb2.QuerySQLRequest.FromString,
            response_serializer=vdsm__pb2.RowResponse.SerializeToString,
        ),
        "QuerySQLUnary": grpc.unary_unary_rpc_method_handler(
            servicer.QuerySQLUnary,
            request_deserializer=vdsm__pb2.QuerySQLRequest.FromString,
            response_serializer=vdsm__pb2.TableResponse.SerializeToString,
        ),
        "QueryPQL": grpc.unary_stream_rpc_method_handler(
            servicer.QueryPQL,
            request_deserializer=vdsm__pb2.QueryPQLRequest.FromString,
            response_serializer=vdsm__pb2.RowResponse.SerializeToString,
        ),
        "QueryPQLUnary": grpc.unary_unary_rpc_method_handler(
            servicer.QueryPQLUnary,
            request_deserializer=vdsm__pb2.QueryPQLRequest.FromString,
            response_serializer=vdsm__pb2.TableResponse.SerializeToString,
        ),
        "Inspect": grpc.unary_stream_rpc_method_handler(
            servicer.Inspect,
            request_deserializer=vdsm__pb2.InspectRequest.FromString,
            response_serializer=vdsm__pb2.RowResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("vdsm.Molecula", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Molecula(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetVDSs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vdsm.Molecula/GetVDSs",
            vdsm__pb2.GetVDSsRequest.SerializeToString,
            vdsm__pb2.GetVDSsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetVDS(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vdsm.Molecula/GetVDS",
            vdsm__pb2.GetVDSRequest.SerializeToString,
            vdsm__pb2.GetVDSResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PostVDS(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vdsm.Molecula/PostVDS",
            vdsm__pb2.PostVDSRequest.SerializeToString,
            vdsm__pb2.PostVDSResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteVDS(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vdsm.Molecula/DeleteVDS",
            vdsm__pb2.DeleteVDSRequest.SerializeToString,
            vdsm__pb2.DeleteVDSResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QuerySQL(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/vdsm.Molecula/QuerySQL",
            vdsm__pb2.QuerySQLRequest.SerializeToString,
            vdsm__pb2.RowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QuerySQLUnary(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vdsm.Molecula/QuerySQLUnary",
            vdsm__pb2.QuerySQLRequest.SerializeToString,
            vdsm__pb2.TableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QueryPQL(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/vdsm.Molecula/QueryPQL",
            vdsm__pb2.QueryPQLRequest.SerializeToString,
            vdsm__pb2.RowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QueryPQLUnary(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vdsm.Molecula/QueryPQLUnary",
            vdsm__pb2.QueryPQLRequest.SerializeToString,
            vdsm__pb2.TableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Inspect(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/vdsm.Molecula/Inspect",
            vdsm__pb2.InspectRequest.SerializeToString,
            vdsm__pb2.RowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
